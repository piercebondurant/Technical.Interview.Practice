Pretend we have a series of N lights on the wall, each with their own switch.
When you turn on the switch for one of the lights, it flips the 
switch for all lights to the right of the one you flipped. Meaning, any lights that were
previously on are now off, and any lights that were previously off are now on.

Your goal is to write a function to determine how many times you need to flip a switch in order to 
turn on all of the lights, and return that value.

        Example 1:           Example 2:
        [0, 1, 0, 1]         [0, 0, 1, 1]        
                                    
        Hit Switch 0:        Hit Switch 0:        
        [1, 0, 1, 0]         [1, 1, 0, 0]        
                                    
        Hit Switch 1:        Hit Switch 2:        
        [1, 1, 0, 1]         [1, 1, 1, 1]        
                                    
        Hit Switch 2:        Result: 2 Presses        
        [1, 1, 1, 0]                

        Hit Switch 3:
        [1, 1, 1, 1]

        Result: 4 Presses


Your function to work in is already provided in the Main, named CountSwitches.

You may not modify the function signature including the return type or its parameters, but you are free to make 
any changes to the body of the funciton. 

TestBulbs has two constructors, a default and an overload. 

The default will use the default parameters of a random seed of 1, 10 tests
and a maximum number of bulbs of 15 per test.

The overload will, in order, take a random seed, number of tests, and maximum number of bulbs as arguments.    

Here are examples of each being called from the Main.
The output from Run() will show you the test data, and the results of each test case.

new TestBulbs().Run();
new TestBulbs(1, 15, 20).Run();